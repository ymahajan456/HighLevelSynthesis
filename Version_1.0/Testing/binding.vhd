
-- ============================================================
-- File Name: binding.vhd
-- ============================================================
-- ************************************************************
-- THIS IS A AUTO-GENERATED FILE. DO NOT EDIT THIS FILE!
-- 
-- 2.0 BUILD. GENERATED ON 2016-11-22
-- ************************************************************

LIBRARY IEEE;
USE ieee.numeric_std.all;
USE ieee.std_logic_1164.all;

ENTITY binding IS
	GENERIC(
		data_width: INTEGER  := 16);
	PORT(
		clk: IN STD_LOGIC := '0';
		reset: IN STD_LOGIC := '0';
		a: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		d: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		b: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		c: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		output_0: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		output_1: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		output_2: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
		start: IN STD_LOGIC := '0';
		complete: OUT STD_LOGIC := '0');
END ENTITY;

ARCHITECTURE top_level OF binding IS
	COMPONENT data_path IS
		GENERIC(
			data_width: INTEGER  := 16);
		PORT(
			clk: IN STD_LOGIC := '0';
			reset: IN STD_LOGIC := '0';
			T: IN STD_LOGIC_VECTOR( 0 TO 36 ) := (others => '0');
			a: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			d: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			b: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			c: IN STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			output_0: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			output_1: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0');
			output_2: OUT STD_LOGIC_VECTOR( 0 TO data_width - 1) := (others => '0'));
	END COMPONENT;

	COMPONENT control_path IS
		PORT(
			start: IN STD_LOGIC := '0';
			complete: OUT STD_LOGIC := '0';
			clk: IN STD_LOGIC := '0';
			reset: IN STD_LOGIC := '0';
			T: OUT STD_LOGIC_VECTOR( 0 TO 36 ) := (others => '0'));
	END COMPONENT;
	SIGNAL T: STD_LOGIC_VECTOR( 0 TO 36 ) := (others => '0');

BEGIN
	data_path0: data_path
		GENERIC MAP(
			data_width => data_width
		)
		PORT MAP(
			clk => clk,
			reset => reset,
			T => T,
			a => a,
			d => d,
			b => b,
			c => c,
			output_0 => output_0,
			output_1 => output_1,
			output_2 => output_2
		);

	control_path0: control_path
		PORT MAP(
			start => start,
			complete => complete,
			clk => clk,
			reset => reset,
			T => T
		);

END ARCHITECTURE;